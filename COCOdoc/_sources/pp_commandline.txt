Standard Use of the :py:mod:`bbob_pproc` Package
================================================

The main interface is in :file:`rungeneric.py` and behaves differently
depending on the number of folders given as input arguments (each corresponding
to the data of a different algorithm).

.. todo::
   provide help for rungeneric.py
   .. autofunction:: bbob_pproc.rungeneric.main
    
If one folder, :file:`DATAPATH`, containing all data generated by the
experiments for *one* algorithm is in the current working directory,
the following command executes the post-processing:

.. sourcecode:: guess

    $ python path_to_postproc_code/bbob_pproc/rungeneric.py DATAPATH
    
    BBOB Post-processing: will generate output data in folder ppdata
      this might take several minutes.
    BBOB Post-processing: will generate post-processing data in folder ppdata/DATAPATH
      this might take several minutes.
    Loading best algorithm data from BBOB-2009...  done.
    Scaling figures done.
    TeX tables (draft) done. To get final version tables, please use the -f option
    ECDF graphs done.
    ERT loss ratio figures and tables done.
    Output data written to folder ppdata/DATAPATH.
    
    $

The above command creates the folder with the default name
:file:`ppdata/DATAPATH` in the current working directory, which
contains the post-processed data in the form of figures and LaTeX files for
the tables. This process might take a few minutes.
Help on the use of the :file:`rungeneric.py` script, which corresponds to
the execution of method :py:mod:`bbob_pproc.rungeneric.main`, can be obtained
by the command ``python path_to_postproc_code/bbob_pproc/rungeneric.py -h``.

To run the post-processing directly from a Python shell, the following
commands need to be executed:

.. sourcecode:: python

   >>> import bbob_pproc as bb
   >>> bb.rungeneric.main('DATAPATH'.split())

    BBOB Post-processing: will generate output data in folder ppdata
      this might take several minutes.
    ...
    Output data written to folder ppdata/DATAPATH.

   >>>

This import command requires that the path to the package :py:mod:`bbob_pproc` is in the search path of Python (e.g. the current folder or use :py:func:`sys.path.append()` to append the path).

The resulting folder :file:`ppdata/DATAPATH` now contains a number of :file:`tex`, :file:`eps`, :file:`pdf` files.

Expensive Setting
-----------------
:file:`rungeneric.py` accepts quite a few parameters, consider

.. sourcecode:: guess

    $ python path_to_postproc_code/bbob_pproc/rungeneric.py --help
    $ python path_to_postproc_code/bbob_pproc/rungeneric1.py --help
    
Since version 13.01, data with a smaller overall budget (number of overall evaluations less than about 1000 times dimension) are processed differently. This processing style can be enforced using the ``--expensive`` option. In this case the targets are chosen based on function values reached by the best 2009 algorithm after some fixed budgets. At this time, the option only applies to the single algorithm processing (via ``rungeneric.py`` or ``rungeneric1.py``). 


Comparison of Algorithms
------------------------

The sub-packages :py:mod:`bbob_pproc.compall` and :py:mod:`bbob_pproc.comp2`
provide facilities for the generation of tables
and figures comparing the performances of algorithms.

The post-processing works with data folders as input argument, with each
folder corresponding to the data of an algorithm.
Supposing you have the folders :file:`ALG1`, :file:`ALG2` and
:file:`ALG3` containing the data of algorithms ALG1, ALG2
and ALG3, you will need to execute from the command line:

.. sourcecode:: guess

   $ python path_to_postproc_code/bbob_pproc/rungeneric.py ALG1 ALG2 ALG3

    BBOB Post-processing: will generate output data in folder ppdata
      this might take several minutes.
    ...
    Output data written to folder ppdata.

This assumes that :file:`ALG1`, :file:`ALG2` and
:file:`ALG3` are valid directories and containing either :file:`pickle`
files (which contain Python-formatted data) or the raw experiment data, in 
particular files with :file:`info`, :file:`dat` and :file:`tdat` extensions.
Running the aforementioned command will generate the folder
:file:`ppdata` containing comparison figures and tables.

Outputs appropriate to the comparison of only two algorithms can be obtained
by executing the following from the command line:

.. sourcecode:: guess

   $ python path_to_postproc_code/bbob_pproc/rungeneric.py ALG0 ALG1

    BBOB Post-processing: will generate output data in folder ppdata
      this might take several minutes.
    ...
    Output data written to folder ppdata.

This assumes the folders :file:`ALG0` and :file:`ALG1` are in the
current working directory.
Running the aforementioned command will generate the folder
:file:`ppdata` containing the comparison figures.

.. note::

   Instead of using the :file:`rungeneric.py` interface, the user can directly use
   the sub-routines :file:`rungeneric1.py`, :file:`rungeneric2.py` or
   :file:`rungenericmany.py` to generate some post-processing output.
   These sub-routines are to be used in the same way as :file:`rungeneric.py`.

Use of the LaTeX Templates
--------------------------

Several LaTeX files are provided as template articles. These files compile the figures
and tables generated by the post-processing in a single document. The templates have 
different layouts. The
files with *noisy* in their names aggregate results on the noisy testbed from BBOB
while the others compile results on the noiseless testbed.

.. :file:`*template*generic.tex` use the default article class from LaTeX,
   whereas :file:`*template*ecj.tex` use the style for submissions to the
   `Evolutionary Computation Journal <http://ecj.lri.fr/>`_. `templateBBOB*.tex` use
   the ACM styles for writing GECCO's BBOB workshop papers.

The purpose of :file:`*template1*` templates is to present the results of one
algorithm on a BBOB testbed (obtained with :py:mod:`bbob_pproc.rungeneric1`).
The templates :file:`*template2*` and :file:`*template3*` respectively for the
comparison of two (:py:mod:`bbob_pproc.rungeneric2`) and two or
more algorithms (:py:mod:`bbob_pproc.rungenericmany`). Similarly, names with 'cmp'
refer to LaTeX templates comparing two algorithms and templates with 'many' in
their names can be used to compare two or more algorithms.

The usual way of using these LaTeX templates is to:

#. copy the necessary template and associated style files (if necessary) in the
   current working directory, i.e. in the same location as the output folder of
   the post-processing :file:`ppdata`.
   
#. (optional) edit the template, in particular the algorithm name. The default 
   data folder name is defined as ``\newcommand{\bbobdatapath}{ppdata/}``.
   In :file:`ppdata` the file :file:`bbob_pproc_commands.tex` 
   defines relevant LaTeX commands, in particular the folder in :file:`ppdata` 
   where the latest post-processed data are found. 

#. compile with LaTeX.

.. note::

   :py:mod:`bbob_pproc.rungeneric` will generate *comparison* figures
   and tables at the base of the output folder and individual results of
   each algorithm for which data were provided in subfolders.
   The :file:`*template1*` templates can be used by pointing to any of these
   subfolders with ``\newcommand{\algfolder}{desired-subfolder}``.

The templates are compiled using LaTeX, for instance:

.. sourcecode:: guess

   $ pdflatex template1generic

     This is pdfTeX...
     entering extended mode
     (./template1generic.tex
     ...
     Output written on template1generic.dvi (...).
     Transcript written on template1generic.log.

   $

This generates document :file:`template1generic.pdf` in the current working
directory.
