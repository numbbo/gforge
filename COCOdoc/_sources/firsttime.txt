What is the purpose of COCO?
============================

.. This section presents and explains the motives behind COCO.

Quantifying and comparing performance of numerical optimization algorithms is
one important aspect of research in search and optimization. However, this task
turns out to be tedious and difficult to realize even in the single-objective
case â€” at least if one is willing to accomplish it in a scientifically decent
and rigorous way.

COCO provides tools for most of this tedious task:

#. choice and implementation of a well-motivated single-objective benchmark
   function testbed,
#. design of an experimental set-up,
#. generation of data output for
#. post-processing and presentation of the results in graphs and tables.

.. _sec:firsttime:

First Time Using COCO
=====================

.. htmlonly::
   In the following, it is assumed that the COCO software has been downloaded
   and installed, see :doc:`installation`.

The following describes the workflow with COCO:

.. contents::
   :local:

Running Experiments
-------------------

For more details, see :doc:`runningexp`.

The code for running experiments with COCO is available in C/C++,
Matlab/GNU Octave, Java, R and Python.

:file:`exampleexperiment` and :file:`exampletiming` are provided in each
language.
These files demonstrate how the code is supposed to be run: the first for doing
an experiment over a set of functions, the second for measuring the time
complexity of an optimizer.

The content of :file:`exampleexperiment.py` shows how the experiment is invoked (see :doc:`runningexp` for an example in Matlab/Octave). The last 20-or-so lines define the experimentation loop over all dimension, all functions, and all instances:

.. literalinclude:: ../../../code/python/exampleexperiment.py

To run the script in :file:`exampleexperiment.py` (it takes only about a
minute), execute the following command from a command line of your operating system:

.. sourcecode:: guess

   $ python path_to_postproc_code/exampleexperiment.py

       f1 in 2-D, instance 1: FEs=20 with 0 restarts, fbest-ftarget=1.6051e+00, elapsed time [h]: 0.00
     ...
       f24 in 40-D, instance 15: FEs=400 with 0 restarts, fbest-ftarget=1.1969e+03, elapsed time [h]: 0.02
         date and time: ...
     ---- dimension 40-D done ----

   $

This generates experimental data in folder :file:`PUT_MY_BBOB_DATA_PATH`.

To run your own experiments, you will need to:

1. modify the method :py:meth:`run_optimizer` to call your optimizer.
2. customize the experiment information: put the datapath, say ``'advanced-random-search'`` instead of ``'PUT_MY_BBOB_DATA_PATH'``,  put the optimizer name instead of
   ``'PUT ALGORITHM NAME'``, add a description instead of
   ``'PUT MORE DETAILED INFORMATION, PARAMETER SETTINGS ETC'``
3. after a first test run, successively increase the maximum number of function
   evaluations :data:`maxfunevals`, subject to the available CPU resources

Post-Processing
---------------

For more details, see :doc:`postprocessing`.

To post-process the data in folder :file:`advanced-random-search`,
execute the python post-processing script from a command line of your
operating system:

.. sourcecode:: guess

   $ python path_to_bbob_pproc/bbob_pproc/rungeneric.py advanced-random-search

     BBOB Post-processing: will generate output data in folder ppdata
       this might take several minutes.
     BBOB Post-processing: will generate post-processing data in folder ppdata/advanced-random-search
       this might take several minutes.
     Loading best algorithm data from BBOB-2009...  done.
     Scaling figures done.
     TeX tables (draft) done. To get final version tables, please use the -f option
     ECDF graphs done.
     ERT loss ratio figures and tables done.
     Output data written to folder ppdata/advanced-random-search.

   $

The :file:`bbob_pproc` folder is located in the python folder of the COCO distribution. This command generates output figures and tables in the folder :file:`ppdata/advanced-random-search`.

Write/Compile an Article
------------------------

LaTeX files are provided as template articles. These files include the figures
and tables generated by the post-processing during LaTeX compilation.

The template corresponding to the post-processed figures and tables for the
data of *one* optimizer on the *noiseless* testbed is :file:`template1generic.tex`.

We assume that the output folder of the post-processing, by default :file:`ppdata`, and the template file are in the current working directory. The path to the figures and tables is set to the default but can be edited in the LaTeX file:

.. sourcecode:: latex

   \newcommand{\bbobdatapath}{ppdata/}

Also the name of the algorithm as it appears in figure captions can be edited (by default it is implied from the original data folder).

.. sourcecode:: latex

   \renewcommand{\algname}{Advanced Random Search}

Then, compile the file using LaTeX, for example:

.. sourcecode:: guess

   $ pdflatex template1generic

     This is pdfTeX...
     entering extended mode
     (./template1generic.tex
     ...
     Output written on template1generic.pdf (...).
     Transcript written on template1generic.log.

This generates document :file:`template1generic.pdf` in the current working
directory. On some systems, the combination latex and dvipdf might produce much better results.

..  * template1generic.tex
    * template2generic.tex
    * template3generic.tex
    * noisytemplate1generic.tex
    * noisytemplate2generic.tex
    * noisytemplate3generic.tex
    * templateBBOBarticle
    * templateBBOBcmp.tex
    * templateBBOBmany.tex
    * templateBBOBnoisyarticle
    * templateBBOBnoisycmp.tex
    * templateBBOBnoisymany.tex


