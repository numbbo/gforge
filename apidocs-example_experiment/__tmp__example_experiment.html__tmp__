<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
          "DTD/xhtml1-strict.dtd">
<html>
  <head>
    <title>example_experiment : API documentation</title>

    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <link type="text/css" rel="stylesheet" href="bootstrap.min.css" />
    <link type="text/css" rel="stylesheet" href="apidocs.css" />
  </head>
  <body>

    <nav class="navbar navbar-default">
      <div class="container">
        <div class="navbar-header">
          <a class="navbar-brand" href="index.html">
            example_experiment API Documentation
          </a>
        </div>
      </div>
    </nav>

    <div id="showPrivate">
      <button class="btn btn-link" onclick="togglePrivate()">Toggle Private API</button>
    </div>

    <div class="container">

      <div class="page-header">
        <h1 class="module"><code>example_experiment</code> <small>module documentation</small></h1>

        <span id="partOf">
          
          
          
        </span>
      </div>

      <div class="extrasDocstring">
        
      </div>

      <div class="moduleDocstring">
        <div><p>Python script for the COCO experimentation module <code>cocoex</code>.</p>
<p>Usage from a system shell:</p>
<pre class="rst-literal-block">
python example_experiment.py bbob
</pre>
<p>runs a full but short experiment on the bbob suite. The optimization
algorithm used is determined by the <a href="example_experiment.html#random_search"><code>SOLVER</code></a> attribute in this file:</p>
<pre class="rst-literal-block">
python example_experiment.py bbob 20
</pre>
<p>runs the same experiment but with a budget of 20 * dimension
f-evaluations:</p>
<pre class="rst-literal-block">
python example_experiment.py bbob-biobj 1e3 1 20
</pre>
<p>runs the first of 20 batches with maximal budget of
1000 * dimension f-evaluations on the bbob-biobj suite.
All batches must be run to generate a complete data set.</p>
<p>Usage from a python shell:</p>
<pre class="py-doctest">
<span class="py-prompt">&gt;&gt;&gt; </span><span class="py-keyword">import</span> example_experiment <span class="py-keyword">as</span> ee
<span class="py-prompt">&gt;&gt;&gt; </span>ee.suite_name = <span class="py-string">"bbob-biobj"</span>
<span class="py-prompt">&gt;&gt;&gt; </span>ee.main(5, 100, 100)  <span class="py-comment"># doctest: +ELLIPSIS</span>
<span class="py-output">Benchmarking solver...</span></pre>
<p>runs the last of 100 batches with budget 5 * dimension.</p>
<p>Calling <a href="example_experiment.html"><code>example_experiment</code></a> without parameters prints this
help and the available suite names.</p><table class="fieldTable"></table></div>
      </div>

      <div id="splitTables">
        <table class="children sortable" id="id1">
  
  <tr class="function">
    
    <td>Function</td>
    <td><a href="example_experiment.html#default_observers" data-type="Function" class="code">default_observers</a></td>
    <td><span>return a map from suite names to default observer names</span></td>
  </tr><tr class="class">
    
    <td>Class</td>
    <td><a href="example_experiment.ObserverOptions.html" data-type="Class" class="code">ObserverOptions</a></td>
    <td><span>a <a href="http://docs.python.org/library/stdtypes.html#dict"><code>dict</code></a> with observer options which can be passed to the (C-based) <code>Observer</code> via the <a href="example_experiment.ObserverOptions.html#as_string"><code>as_string</code></a> property.</span></td>
  </tr><tr class="function">
    
    <td>Function</td>
    <td><a href="example_experiment.html#print_flush" data-type="Function" class="code">print_flush</a></td>
    <td><span>print without newline but with flush</span></td>
  </tr><tr class="function">
    
    <td>Function</td>
    <td><a href="example_experiment.html#ascetime" data-type="Function" class="code">ascetime</a></td>
    <td><span>return elapsed time as str.</span></td>
  </tr><tr class="class">
    
    <td>Class</td>
    <td><a href="example_experiment.ShortInfo.html" data-type="Class" class="code">ShortInfo</a></td>
    <td><span>print minimal info during benchmarking.</span></td>
  </tr><tr class="function">
    
    <td>Function</td>
    <td><a href="example_experiment.html#random_search" data-type="Function" class="code">random_search</a></td>
    <td><span>Efficient implementation of uniform random search between <code>lbounds</code> and <code>ubounds</code>.</span></td>
  </tr><tr class="function">
    
    <td>Function</td>
    <td><a href="example_experiment.html#batch_loop" data-type="Function" class="code">batch_loop</a></td>
    <td><span>loop over all problems in <code>suite</code> calling <code>coco_optimize(solver, problem, budget * problem.dimension, max_runs)</code> for each eligible problem.</span></td>
  </tr><tr class="function">
    
    <td>Function</td>
    <td><a href="example_experiment.html#coco_optimize" data-type="Function" class="code">coco_optimize</a></td>
    <td><span><code>fun</code> is a callable, to be optimized by <code>solver</code>.</span></td>
  </tr><tr class="function">
    
    <td>Function</td>
    <td><a href="example_experiment.html#main" data-type="Function" class="code">main</a></td>
    <td><span>Initialize suite and observer, then benchmark solver by calling <code>batch_loop(SOLVER, suite, observer, budget,...</code>.</span></td>
  </tr>
</table>
        

          
      </div>

      <div id="childList">

        <div class="basefunction">
  
  <a name="example_experiment.default_observers">
    
  </a>
  <a name="default_observers">
    
  </a>
  <div class="functionHeader">
    
    def
    default_observers(update={}):
    
  </div>
  <div class="docstring functionBody">
    
    
    <div>return a map from suite names to default observer names<table class="fieldTable"></table></div>
  </div>
</div><div class="basefunction">
  
  <a name="example_experiment.print_flush">
    
  </a>
  <a name="print_flush">
    
  </a>
  <div class="functionHeader">
    
    def
    print_flush(*args):
    
  </div>
  <div class="docstring functionBody">
    
    
    <div>print without newline but with flush<table class="fieldTable"></table></div>
  </div>
</div><div class="basefunction">
  
  <a name="example_experiment.ascetime">
    
  </a>
  <a name="ascetime">
    
  </a>
  <div class="functionHeader">
    
    def
    ascetime(sec):
    
  </div>
  <div class="docstring functionBody">
    
    
    <div><p>return elapsed time as str.</p>
<p>Example: return <code>"0h33:21"</code> if <code>sec == 33*60 + 21</code>.</p><table class="fieldTable"></table></div>
  </div>
</div><div class="basefunction">
  
  <a name="example_experiment.random_search">
    
  </a>
  <a name="random_search">
    
  </a>
  <div class="functionHeader">
    
    def
    random_search(fun, lbounds, ubounds, budget):
    
  </div>
  <div class="docstring functionBody">
    
    
    <div>Efficient implementation of uniform random search between <code>lbounds</code> and <code>ubounds</code>.<table class="fieldTable"></table></div>
  </div>
</div><div class="basefunction">
  
  <a name="example_experiment.batch_loop">
    
  </a>
  <a name="batch_loop">
    
  </a>
  <div class="functionHeader">
    
    def
    batch_loop(solver, suite, observer, budget, max_runs, current_batch, number_of_batches):
    
  </div>
  <div class="docstring functionBody">
    
    
    <div><p>loop over all problems in <code>suite</code> calling
<code>coco_optimize(solver, problem, budget * problem.dimension, max_runs)</code>
for each eligible problem.</p>
<p>A problem is eligible if
<code>problem_index + current_batch - 1</code> modulo <code>number_of_batches</code>
equals to zero.</p><table class="fieldTable"></table></div>
  </div>
</div><div class="basefunction">
  
  <a name="example_experiment.coco_optimize">
    
  </a>
  <a name="coco_optimize">
    
  </a>
  <div class="functionHeader">
    
    def
    coco_optimize(solver, fun, max_evals, max_runs=1000000000.0):
    
  </div>
  <div class="docstring functionBody">
    
    
    <div><p><code>fun</code> is a callable, to be optimized by <code>solver</code>.</p>
<p>The <code>solver</code> is called repeatedly with different initial solutions
until either the <code>max_evals</code> are exhausted or <code>max_run</code> solver calls
have been made or the <code>solver</code> has not called <code>fun</code> even once
in the last run.</p>
<p>Return number of (almost) independent runs.</p><table class="fieldTable"></table></div>
  </div>
</div><div class="basefunction">
  
  <a name="example_experiment.main">
    
  </a>
  <a name="main">
    
  </a>
  <div class="functionHeader">
    
    def
    main(budget=budget, max_runs=max_runs, current_batch=current_batch, number_of_batches=number_of_batches):
    
  </div>
  <div class="docstring functionBody">
    
    
    <div>Initialize suite and observer, then benchmark solver by calling
<code>batch_loop(SOLVER, suite, observer, budget,...</code>.<table class="fieldTable"></table></div>
  </div>
</div>

      </div>
      <address>
        <a href="index.html">API Documentation</a> for example_experiment, generated by <a href="https://github.com/twisted/pydoctor/">pydoctor</a> at 2016-09-29 01:20:20.
      </address>

    </div>

    <script type="text/javascript" src="pydoctor.js"></script>

  </body>
</html>