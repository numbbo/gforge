<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
          "DTD/xhtml1-strict.dtd">
<html>
  <head>
    <title>cocopp.pproc.TargetValues : API documentation</title>

    <meta content="text/html;charset=utf-8" http-equiv="Content-Type" />
    <link href="bootstrap.min.css" rel="stylesheet" type="text/css" />
    <link href="apidocs.css" rel="stylesheet" type="text/css" />
  </head>
  <body>

    <nav class="navbar navbar-default">
      <div class="container">
        <div class="navbar-header">
          <a class="navbar-brand" href="index.html">
            cocopp API Documentation
          </a>
        </div>
      </div>
    </nav>

    <div id="showPrivate">
      <button class="btn btn-link" onclick="togglePrivate()">Toggle Private API</button>
    </div>

    <div class="container">

      <div class="page-header">
        <h1 class="class"><code>cocopp.pproc.TargetValues(<span title="object">object</span>)</code> <small>class documentation</small></h1>

        <span id="partOf">
          Part of <code><a href="cocopp.html" data-type="Package" class="code">cocopp</a>.<a href="cocopp.pproc.html" data-type="Module" class="code">pproc</a></code>
          
          <a href="classIndex.html#cocopp.pproc.TargetValues">(View In Hierarchy)</a>
        </span>
      </div>

      <div class="extrasDocstring">
        <p>Known subclasses: <a href="cocopp.pproc.RunlengthBasedTargetValues.html" data-type="Class" class="code">cocopp.pproc.RunlengthBasedTargetValues</a></p>
      </div>

      <div class="moduleDocstring">
        <div><p>store and retrieve a list of target function values:</p>
<pre class="rst-literal-block">
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import cocopp.pproc as pp
&gt;&gt;&gt; targets = [10**i for i in np.arange(2, -8.1, -0.2)]
&gt;&gt;&gt; targets_as_class = pp.TargetValues(targets)
&gt;&gt;&gt; assert targets_as_class() == targets
</pre>
<p>In itself this class is useless, as it does not more than a simple list
could do, but it serves as interface for derived classes, where <tt class="rst-docutils literal">targets()</tt>
requires an actual argument <tt class="rst-docutils literal">targets(fun_dim)</tt>.</p>
<p>Details: The optional argument for calling the class instance is needed to
be consistent with the derived <tt class="rst-docutils literal">class RunlengthBasedTargetValues</tt>.</p><table class="fieldTable"></table></div>
      </div>

      <div id="splitTables">
        <table class="children sortable" id="id44">
  
  <tr class="method">
    
    <td>Method</td>
    <td><a href="cocopp.pproc.TargetValues.html#__init__" data-type="Method" class="code">__init__</a></td>
    <td><span class="undocumented">Undocumented</span></td>
  </tr><tr class="method">
    
    <td>Method</td>
    <td><a href="cocopp.pproc.TargetValues.html#short_info" data-type="Method" class="code">short_info</a></td>
    <td><span class="undocumented">Undocumented</span></td>
  </tr><tr class="staticmethod">
    
    <td>Static Method</td>
    <td><a href="cocopp.pproc.TargetValues.html#cast" data-type="Static Method" class="code">cast</a></td>
    <td><span class="undocumented">No summary</span></td>
  </tr><tr class="method">
    
    <td>Method</td>
    <td><a href="cocopp.pproc.TargetValues.html#__len__" data-type="Method" class="code">__len__</a></td>
    <td><span class="undocumented">Undocumented</span></td>
  </tr><tr class="method">
    
    <td>Method</td>
    <td><a href="cocopp.pproc.TargetValues.html#__call__" data-type="Method" class="code">__call__</a></td>
    <td><span class="undocumented">Undocumented</span></td>
  </tr><tr class="method">
    
    <td>Method</td>
    <td><a href="cocopp.pproc.TargetValues.html#label" data-type="Method" class="code">label</a></td>
    <td><span>return the <tt class="rst-docutils literal">i</tt>-th target value as <tt class="rst-docutils literal">str</tt>, to be overwritten by a derived class</span></td>
  </tr><tr class="method">
    
    <td>Method</td>
    <td><a href="cocopp.pproc.TargetValues.html#loglabel" data-type="Method" class="code">loglabel</a></td>
    <td><span>return <tt class="rst-docutils literal">log10</tt> of the <tt class="rst-docutils literal">i</tt>-th target value as <tt class="rst-docutils literal">str</tt>, to be overwritten by a derived class</span></td>
  </tr><tr class="method">
    
    <td>Method</td>
    <td><a href="cocopp.pproc.TargetValues.html#labels" data-type="Method" class="code">labels</a></td>
    <td><span>target values as a list of <tt class="rst-docutils literal">str</tt></span></td>
  </tr><tr class="method">
    
    <td>Method</td>
    <td><a href="cocopp.pproc.TargetValues.html#loglabels" data-type="Method" class="code">loglabels</a></td>
    <td><span><tt class="rst-docutils literal">log10</tt> of the target values as a list of <tt class="rst-docutils literal">str</tt></span></td>
  </tr><tr class="method">
    
    <td>Method</td>
    <td><a href="cocopp.pproc.TargetValues.html#label_name" data-type="Method" class="code">label_name</a></td>
    <td><span class="undocumented">Undocumented</span></td>
  </tr><tr class="staticmethod private">
    
    <td>Static Method</td>
    <td><a href="cocopp.pproc.TargetValues.html#_discretize" data-type="Static Method" class="code">_discretize</a></td>
    <td><span>return a "similar" list with targets in [10**i/5]</span></td>
  </tr>
</table>
        

          
      </div>

      <div id="childList">

        <div class="basemethod">
  
  <a name="cocopp.pproc.TargetValues.__init__">
    
  </a>
  <a name="__init__">
    
  </a>
  <div class="functionHeader">
    
    def
    __init__(self, target_values, discretize=None):
    
  </div>
  <div class="docstring functionBody">
    <div class="interfaceinfo">overridden in <a href="cocopp.pproc.RunlengthBasedTargetValues.html" data-type="Class" class="code">cocopp.pproc.RunlengthBasedTargetValues</a></div>
    
    <div class="undocumented">Undocumented</div>
  </div>
</div><div class="basemethod">
  
  <a name="cocopp.pproc.TargetValues.short_info">
    
  </a>
  <a name="short_info">
    
  </a>
  <div class="functionHeader">
    @property<br />
    def
    short_info(self):
    
  </div>
  <div class="docstring functionBody">
    
    
    <div class="undocumented">Undocumented</div>
  </div>
</div><div class="basestaticmethod">
  
  <a name="cocopp.pproc.TargetValues.cast">
    
  </a>
  <a name="cast">
    
  </a>
  <div class="functionHeader">
    @staticmethod<br />
    def
    cast(target_values_or_class_instance, *args, **kwargs):
    
  </div>
  <div class="docstring functionBody">
    <div class="interfaceinfo">overridden in <a href="cocopp.pproc.RunlengthBasedTargetValues.html" data-type="Class" class="code">cocopp.pproc.RunlengthBasedTargetValues</a></div>
    
    <pre>idempotent cast to ``TargetValues`` class type, specifically
``return TargetValues(target_values_or_class_instance) 
    if not isinstance(target_values_or_class_instance, TargetValues) 
    else target_values_or_class_instance`` 
    </pre>
  </div>
</div><div class="basemethod">
  
  <a name="cocopp.pproc.TargetValues.__len__">
    
  </a>
  <a name="__len__">
    
  </a>
  <div class="functionHeader">
    
    def
    __len__(self):
    
  </div>
  <div class="docstring functionBody">
    <div class="interfaceinfo">overridden in <a href="cocopp.pproc.RunlengthBasedTargetValues.html" data-type="Class" class="code">cocopp.pproc.RunlengthBasedTargetValues</a></div>
    
    <div class="undocumented">Undocumented</div>
  </div>
</div><div class="basemethod">
  
  <a name="cocopp.pproc.TargetValues.__call__">
    
  </a>
  <a name="__call__">
    
  </a>
  <div class="functionHeader">
    
    def
    __call__(self, fun_dim_but_not_use=None, discretize=None):
    
  </div>
  <div class="docstring functionBody">
    <div class="interfaceinfo">overridden in <a href="cocopp.pproc.RunlengthBasedTargetValues.html" data-type="Class" class="code">cocopp.pproc.RunlengthBasedTargetValues</a></div>
    
    <div class="undocumented">Undocumented</div>
  </div>
</div><div class="basestaticmethod private">
  
  <a name="cocopp.pproc.TargetValues._discretize">
    
  </a>
  <a name="_discretize">
    
  </a>
  <div class="functionHeader">
    @staticmethod<br />
    def
    _discretize(target_list):
    
  </div>
  <div class="docstring functionBody">
    
    
    <div>return a "similar" list with targets in [10**i/5]<table class="fieldTable"></table></div>
  </div>
</div><div class="basemethod">
  
  <a name="cocopp.pproc.TargetValues.label">
    
  </a>
  <a name="label">
    
  </a>
  <div class="functionHeader">
    
    def
    label(self, i):
    
  </div>
  <div class="docstring functionBody">
    <div class="interfaceinfo">overridden in <a href="cocopp.pproc.RunlengthBasedTargetValues.html" data-type="Class" class="code">cocopp.pproc.RunlengthBasedTargetValues</a></div>
    
    <div>return the <tt class="rst-docutils literal">i</tt>-th target value as <tt class="rst-docutils literal">str</tt>, to be overwritten by a derived class<table class="fieldTable"></table></div>
  </div>
</div><div class="basemethod">
  
  <a name="cocopp.pproc.TargetValues.loglabel">
    
  </a>
  <a name="loglabel">
    
  </a>
  <div class="functionHeader">
    
    def
    loglabel(self, i, decimals=0):
    
  </div>
  <div class="docstring functionBody">
    <div class="interfaceinfo">overridden in <a href="cocopp.pproc.RunlengthBasedTargetValues.html" data-type="Class" class="code">cocopp.pproc.RunlengthBasedTargetValues</a></div>
    
    <div>return <tt class="rst-docutils literal">log10</tt> of the <tt class="rst-docutils literal">i</tt>-th target value as <tt class="rst-docutils literal">str</tt>, to be overwritten by a derived class<table class="fieldTable"></table></div>
  </div>
</div><div class="basemethod">
  
  <a name="cocopp.pproc.TargetValues.labels">
    
  </a>
  <a name="labels">
    
  </a>
  <div class="functionHeader">
    
    def
    labels(self):
    
  </div>
  <div class="docstring functionBody">
    <div class="interfaceinfo">overridden in <a href="cocopp.pproc.RunlengthBasedTargetValues.html" data-type="Class" class="code">cocopp.pproc.RunlengthBasedTargetValues</a></div>
    
    <div>target values as a list of <tt class="rst-docutils literal">str</tt><table class="fieldTable"></table></div>
  </div>
</div><div class="basemethod">
  
  <a name="cocopp.pproc.TargetValues.loglabels">
    
  </a>
  <a name="loglabels">
    
  </a>
  <div class="functionHeader">
    
    def
    loglabels(self, decimals=0):
    
  </div>
  <div class="docstring functionBody">
    
    
    <div><tt class="rst-docutils literal">log10</tt> of the target values as a list of <tt class="rst-docutils literal">str</tt><table class="fieldTable"></table></div>
  </div>
</div><div class="basemethod">
  
  <a name="cocopp.pproc.TargetValues.label_name">
    
  </a>
  <a name="label_name">
    
  </a>
  <div class="functionHeader">
    
    def
    label_name(self):
    
  </div>
  <div class="docstring functionBody">
    <div class="interfaceinfo">overridden in <a href="cocopp.pproc.RunlengthBasedTargetValues.html" data-type="Class" class="code">cocopp.pproc.RunlengthBasedTargetValues</a></div>
    
    <div class="undocumented">Undocumented</div>
  </div>
</div>

      </div>
      <address>
        <a href="index.html">API Documentation</a> for cocopp, generated by <a href="https://github.com/twisted/pydoctor/">pydoctor</a> at 2017-05-03 17:44:06.
      </address>

    </div>

    <script src="pydoctor.js" type="text/javascript"></script>

  </body>
</html>